{"version":3,"sources":["src/config.ts","src/Square.ts","src/Squares.ts","src/utils/index.ts","src/Board.ts","src/utils/PathfindingList.ts","src/algorithms/astar.ts","src/algorithms/dijkstra.ts","src/algorithms/bestFirstSearch.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.a4fe88b8.js","sourceRoot":"..","sourcesContent":["const config = {\n  WIDTH: 500,\n  ROWS: 25,\n  REFRESH_RATE: 100,\n  ANIM_WAIT_TIME: 100,\n};\nexport default config;\n","import Squares from \"./Squares\";\n\nenum Color {\n  Red = \"red\",\n  Green = \"lightgreen\",\n  Orange = \"orange\",\n  Grey = \"grey\",\n  White = \"white\",\n  Yellow = \"yellow\",\n}\n\ntype Point = {\n  x: number;\n  y: number;\n};\n\nclass Square {\n  row: number;\n  col: number;\n  width: number;\n  x: number;\n  y: number;\n  color: Color;\n  neighbors: Square[] = [];\n\n  constructor(\n    row: number,\n    col: number,\n    width: number,\n    color: Color = Color.White\n  ) {\n    this.row = row;\n    this.col = col;\n    this.width = width;\n    this.x = row * width;\n    this.y = col * width;\n    this.color = color;\n  }\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.fillStyle = this.color;\n    ctx.fillRect(this.x, this.y, this.width, this.width);\n    ctx.fill();\n  }\n  getPos(): Point {\n    return { x: this.row, y: this.col };\n  }\n\n  reset(): void {\n    this.color = Color.White;\n  }\n  makeObstacle(): void {\n    this.color = Color.Grey;\n  }\n  makeGoal(): void {\n    this.color = Color.Red;\n  }\n  makeStart(): void {\n    this.color = Color.Yellow;\n  }\n  makeVisited(): void {\n    this.color = Color.Green;\n  }\n  makeOptimal(): void {\n    this.color = Color.Orange;\n  }\n\n  isObstacle(): boolean {\n    return this.color === Color.Grey;\n  }\n  isGoal(): boolean {\n    return this.color === Color.Red;\n  }\n  isStart(): boolean {\n    return this.color === Color.Yellow;\n  }\n  isVisited(): boolean {\n    return this.color === Color.Green;\n  }\n  isOptimal(): boolean {\n    return this.color == Color.Orange;\n  }\n  updateNeighbors(squares: Squares, numRows: number): void {\n    this.neighbors = [];\n    //up\n    if (\n      this.row - 1 >= 0 &&\n      !squares.getSquare(this.row - 1, this.col).isObstacle()\n    ) {\n      this.neighbors.push(squares.getSquare(this.row - 1, this.col));\n    }\n    //down\n    if (\n      this.row + 1 < numRows &&\n      !squares.getSquare(this.row + 1, this.col).isObstacle()\n    ) {\n      this.neighbors.push(squares.getSquare(this.row + 1, this.col));\n    }\n    //left\n    if (\n      this.col - 1 >= 0 &&\n      !squares.getSquare(this.row, this.col - 1).isObstacle()\n    ) {\n      this.neighbors.push(squares.getSquare(this.row, this.col - 1));\n    }\n    //right\n    if (\n      this.col + 1 < numRows &&\n      !squares.getSquare(this.row, this.col + 1).isObstacle()\n    ) {\n      this.neighbors.push(squares.getSquare(this.row, this.col + 1));\n    }\n  }\n}\n\nexport { Square, Color, Point };\n","import { Square } from \"./Square\";\nclass Squares {\n  width: number;\n  rows: number;\n  squares: Square[][];\n  constructor(width: number, rows: number) {\n    this.width = width;\n    this.rows = rows;\n    this.squares = [];\n    const squareWidth = Math.floor(width / rows);\n    for (let i = 0; i < rows; i++) {\n      this.squares.push([]);\n      for (let j = 0; j < rows; j++) {\n        this.squares[i].push(new Square(i, j, squareWidth));\n      }\n    }\n  }\n  draw(ctx: CanvasRenderingContext2D): void {\n    for (const rows of this.squares) {\n      for (const square of rows) {\n        square.draw(ctx);\n      }\n    }\n  }\n  getSquare(row: number, col: number): Square {\n    return this.squares[row][col];\n  }\n  updateNeighbors(): void {\n    for (const row of this.squares) {\n      for (const square of row) {\n        square.updateNeighbors(this, this.rows);\n      }\n    }\n  }\n  getNumSquares(): number {\n    return this.squares.length * this.squares[0].length;\n  }\n\n  reset(): void {\n    for (const row of this.squares) {\n      for (const square of row) {\n        square.reset();\n      }\n    }\n  }\n  resetPathSquares(): void {\n    for (const rows of this.squares) {\n      for (const square of rows) {\n        if (square.isVisited() || square.isOptimal()) {\n          square.reset();\n        }\n      }\n    }\n  }\n}\n\nexport default Squares;\n","import { Point, Square } from \"../Square\";\nimport Board from \"../Board\";\nexport enum MouseClick {\n  Left = 1,\n  Middle,\n  Right,\n}\n\nexport const distance = (point1: Point, point2: Point): number =>\n  Math.abs(point2.x - point1.x) + Math.abs(point2.y - point1.y);\n\nexport const wait = function (millis: number): Promise<void> {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, millis);\n  });\n};\n\nexport const initializeScores = (\n  board: Board,\n  scoreFunc: (sq: Square) => number\n) => {\n  const scores: number[][] = [];\n  for (let i = 0; i < board.rows; i++) {\n    scores.push([]);\n    for (let j = 0; j < board.rows; j++) {\n      scores[i].push(scoreFunc(board.squares.getSquare(i, j)));\n    }\n  }\n  return scores;\n};\n","import Squares from \"./Squares\";\nimport { Square } from \"./Square\";\nimport { MouseClick } from \"./utils/index\";\n\ntype PathfindingAlgorithm = (board: Board) => Promise<void>;\nclass Board {\n  width: number;\n  rows: number;\n  squares: Squares;\n  mouseDown: boolean;\n  canvas: HTMLCanvasElement;\n  squareWidth: number;\n  startSquare: Square | null = null;\n  goalSquare: Square | null = null;\n  heldBtn: MouseClick | null = null;\n  startedSolving: boolean = false;\n  solver: PathfindingAlgorithm;\n  algFinished: boolean = false;\n\n  constructor(\n    width: number,\n    rows: number,\n    canvas: HTMLCanvasElement,\n    solver: PathfindingAlgorithm\n  ) {\n    this.width = width;\n    this.rows = rows;\n    this.squares = new Squares(width, rows);\n    this.mouseDown = false;\n    this.canvas = canvas;\n    this.squareWidth = Math.floor(this.width / this.rows);\n    this.solver = solver;\n  }\n\n  drawOutline(ctx: CanvasRenderingContext2D): void {\n    const gap = Math.floor(this.width / this.rows);\n    ctx.strokeStyle = \"black\";\n    ctx.lineWidth = 2;\n    ctx.globalCompositeOperation = \"destination-over\";\n    for (let i = 0; i <= this.rows; i++) {\n      ctx.beginPath();\n      ctx.moveTo(0, i * gap);\n      ctx.lineTo(this.width, i * gap);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(i * gap, 0);\n      ctx.lineTo(i * gap, this.width);\n      ctx.stroke();\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D): void {\n    this.drawOutline(ctx);\n    this.squares.draw(ctx);\n  }\n\n  attachEventListeners() {\n    this.canvas.addEventListener(\"mousedown\", (event) => {\n      if (this.startedSolving) {\n        return;\n      }\n      this.heldBtn = event.which;\n      this.handleHold(event);\n      this.mouseDown = true;\n    });\n    this.canvas.addEventListener(\"mousemove\", (event) => {\n      if (this.startedSolving) {\n        return;\n      }\n      if (this.mouseDown) {\n        this.handleHold(event);\n      }\n    });\n    document.addEventListener(\"mouseup\", () => {\n      if (this.startedSolving) {\n        return;\n      }\n      this.heldBtn = null;\n      this.mouseDown = false;\n    });\n    document\n      .querySelector(\"#startVisBtn\")\n      ?.addEventListener(\"click\", () => this.startSolving());\n\n    document\n      .querySelector(\"#resetBoardBtn\")\n      ?.addEventListener(\"click\", () => this.resetBoard());\n  }\n\n  handleHold(event: MouseEvent): void {\n    const x = event.clientX - this.canvas.offsetLeft;\n    const y = event.clientY - this.canvas.offsetTop;\n    const row = Math.floor(x / this.squareWidth);\n    const col = Math.floor(y / this.squareWidth);\n    const selectedSquare = this.squares.getSquare(row, col);\n    if (this.heldBtn === MouseClick.Left) {\n      this.handleLeftHold(selectedSquare);\n    } else if (this.heldBtn === MouseClick.Right) {\n      this.handleRightHold(selectedSquare);\n    }\n  }\n\n  handleLeftHold(selectedSquare: Square): void {\n    if (this.startSquare === null && selectedSquare !== this.goalSquare) {\n      selectedSquare.makeStart();\n      this.startSquare = selectedSquare;\n    } else if (\n      this.goalSquare === null &&\n      selectedSquare !== this.startSquare\n    ) {\n      selectedSquare.makeGoal();\n      this.goalSquare = selectedSquare;\n    } else {\n      if (\n        selectedSquare !== this.startSquare &&\n        selectedSquare !== this.goalSquare\n      ) {\n        selectedSquare.makeObstacle();\n      }\n    }\n  }\n\n  handleRightHold(selectedSquare: Square): void {\n    if (selectedSquare === this.startSquare) {\n      this.startSquare = null;\n    }\n    if (selectedSquare === this.goalSquare) {\n      this.goalSquare = null;\n    }\n    selectedSquare.reset();\n  }\n  clearBoard(ctx: CanvasRenderingContext2D): void {\n    ctx.clearRect(0, 0, this.width, this.width);\n    this.draw(ctx);\n  }\n\n  startSolving(): void {\n    if (this.startSquare === null || this.goalSquare === null) {\n      alert(\"Start and goal is not defined\");\n      return;\n    }\n    if (this.algFinished) {\n      this.squares.resetPathSquares();\n    }\n    this.startedSolving = true;\n    this.squares.updateNeighbors();\n    this.solver(this);\n    this.algFinished = true;\n    this.startedSolving = false;\n  }\n\n  resetBoard(): void {\n    if (this.startedSolving) {\n      return;\n    }\n    this.squares.reset();\n    this.startSquare = null;\n    this.goalSquare = null;\n  }\n}\n\nexport default Board;\n","import { Square } from \"../Square\";\n\nexport interface ListEntry {\n  square: Square;\n  fscore: number;\n  from: ListEntry | null;\n}\n\nexport class PathfindingList {\n  items: ListEntry[];\n  constructor() {\n    this.items = [];\n  }\n\n  put(item: ListEntry): void {\n    this.items.push(item);\n  }\n\n  pop(): ListEntry {\n    if (this.isEmpty()) {\n      throw new Error(\"underflow\");\n    }\n    return this.items.pop() as ListEntry;\n  }\n\n  isEmpty(): boolean {\n    return this.items.length === 0;\n  }\n  sort(): void {\n    this.items.sort((li1, li2) => {\n      if (li1.fscore > li2.fscore) {\n        return -1;\n      } else if (li1.fscore < li2.fscore) {\n        return 1;\n      }\n      return 0;\n    });\n  }\n\n  contains(square: Square): boolean {\n    return this.items.map((item) => item.square).includes(square);\n  }\n}\n","import Board from \"../Board\";\nimport { ListEntry, PathfindingList } from \"../utils/PathfindingList\";\nimport { wait, distance, initializeScores } from \"../utils/index\";\nimport config from \"../config\";\nimport { Square } from \"../Square\";\n\nexport const backtrack = async function (\n  board: Board,\n  goal: ListEntry\n): Promise<void> {\n  let curr = goal;\n  while (true) {\n    if (curr.from === null) {\n      break;\n    }\n    if (curr.square !== board.goalSquare && curr.square !== board.startSquare) {\n      curr.square.makeOptimal();\n    }\n    curr = curr.from;\n    await wait(config.ANIM_WAIT_TIME);\n  }\n};\n\nconst astar = async function (board: Board): Promise<void> {\n  const openList = new PathfindingList();\n  if (board.startSquare === null || board.goalSquare === null) {\n    return;\n  }\n  openList.put({\n    square: board.startSquare,\n    fscore: distance(board.startSquare.getPos(), board.goalSquare.getPos()),\n    from: null,\n  });\n  const fscores: number[][] = initializeScores(board, () => Infinity);\n  const hscores: number[][] = initializeScores(board, (sq) =>\n    distance(sq.getPos(), (board.goalSquare as Square).getPos())\n  );\n  const gscores: number[][] = initializeScores(board, () => Infinity);\n  fscores[board.startSquare.row][board.startSquare.col] =\n    hscores[board.startSquare.row][board.startSquare.col];\n  gscores[board.startSquare.row][board.startSquare.col] = 0;\n  while (!openList.isEmpty()) {\n    openList.sort();\n    const current = openList.pop();\n    const currSquare = current.square;\n    if (currSquare === board.goalSquare) {\n      console.log(\"Solved\");\n      await backtrack(board, current);\n      return;\n    }\n    exploreNeighbors(fscores, gscores, hscores, current, board, openList);\n    await wait(config.ANIM_WAIT_TIME);\n  }\n  console.log(\"Unsolvable\");\n};\n\nconst exploreNeighbors = (\n  fscores: number[][],\n  gscores: number[][],\n  hscores: number[][],\n  current: ListEntry,\n  board: Board,\n  openList: PathfindingList\n) => {\n  const currSquare = current.square;\n  const gscore_neighbors = gscores[currSquare.row][currSquare.col] + 1;\n  for (const neighbor of currSquare.neighbors) {\n    if (gscore_neighbors < gscores[neighbor.row][neighbor.col]) {\n      gscores[neighbor.row][neighbor.col] = gscore_neighbors;\n      const fscoreNew = gscore_neighbors + hscores[neighbor.row][neighbor.col];\n      fscores[neighbor.row][neighbor.col] = fscoreNew;\n      if (neighbor !== board.startSquare && neighbor !== board.goalSquare) {\n        neighbor.makeVisited();\n      }\n      openList.put({\n        from: current,\n        square: neighbor,\n        fscore: fscoreNew,\n      });\n    }\n  }\n};\n\nexport default astar;\n","import { PathfindingList } from \"../utils/PathfindingList\";\nimport { initializeScores, wait } from \"../utils/index\";\nimport Board from \"../Board\";\nimport config from \"../config\";\nimport { backtrack } from \"./astar\";\n\nconst dijkstra = async function (board: Board): Promise<void> {\n  if (board.startSquare === null || board.goalSquare === null) {\n    return;\n  }\n  const openList = new PathfindingList();\n  const fscores = initializeScores(board, () => Infinity);\n  fscores[board.startSquare.row][board.startSquare.col] = 0;\n  openList.put({ from: null, square: board.startSquare, fscore: 0 });\n  while (!openList.isEmpty()) {\n    openList.sort();\n    const current = openList.pop();\n    const currentSquare = current.square;\n    if (currentSquare === board.goalSquare) {\n      console.log(\"solved\");\n      backtrack(board, current);\n      return;\n    }\n    const newScore = current.fscore + 1;\n    for (const neighbor of currentSquare.neighbors) {\n      if (newScore < fscores[neighbor.row][neighbor.col]) {\n        if (!neighbor.isGoal() && !neighbor.isStart()) {\n          neighbor.makeVisited();\n        }\n        fscores[neighbor.row][neighbor.col] = newScore;\n        openList.put({\n          fscore: newScore,\n          from: current,\n          square: neighbor,\n        });\n      }\n    }\n    await wait(config.ANIM_WAIT_TIME);\n  }\n  console.log(\"unsolvable\");\n};\n\nexport default dijkstra;\n","import Board from \"../Board\";\nimport { PathfindingList } from \"../utils/PathfindingList\";\nimport { distance, initializeScores, wait } from \"../utils/index\";\nimport { Square } from \"../Square\";\nimport { backtrack } from \"./astar\";\nimport config from \"../config\";\n\nconst bestFirstSearch = async function (board: Board): Promise<void> {\n  if (board.startSquare === null || board.goalSquare === null) {\n    return;\n  }\n  const openList = new PathfindingList();\n  openList.put({\n    from: null,\n    fscore: distance(board.startSquare.getPos(), board.goalSquare.getPos()),\n    square: board.startSquare,\n  });\n  const fscores = initializeScores(board, (sq) =>\n    distance((board.goalSquare as Square).getPos(), sq.getPos())\n  );\n  const visited: Square[] = [];\n  while (!openList.isEmpty()) {\n    openList.sort();\n    const current = openList.pop();\n    const currSquare = current.square;\n    // if (currSquare.isStart()) {\n    //   continue;\n    // }\n    if (currSquare === board.goalSquare) {\n      console.log(\"solved\");\n      backtrack(board, current);\n      return;\n    }\n    for (const neighbor of currSquare.neighbors) {\n      if (!visited.includes(neighbor)) {\n        visited.push(neighbor);\n        if (!neighbor.isGoal() && !neighbor.isStart()) {\n          neighbor.makeVisited();\n        }\n        openList.put({\n          square: neighbor,\n          from: current,\n          fscore: fscores[neighbor.row][neighbor.col],\n        });\n      }\n    }\n    await wait(config.ANIM_WAIT_TIME);\n  }\n};\n\nexport default bestFirstSearch;\n","import config from \"./config\";\nimport Board from \"./Board\";\nimport astar from \"./algorithms/astar\";\nimport dijkstra from \"./algorithms/dijkstra\";\nimport bestFirstSearch from \"./algorithms/bestFirstSearch\";\n\nconst algorithms = [astar, bestFirstSearch, dijkstra];\n\nconst algChooser: HTMLSelectElement = document.querySelector(\n  \"#algChooser\"\n) as HTMLSelectElement;\n\nconst canvas = document.querySelector(\"#canvas\") as HTMLCanvasElement;\nconst ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\ncanvas.width = config.WIDTH;\ncanvas.height = config.WIDTH;\n\nconst board = new Board(\n  config.WIDTH,\n  config.ROWS,\n  canvas,\n  algorithms[algChooser.selectedIndex]\n);\nboard.draw(ctx);\nboard.attachEventListeners();\n\nalgChooser.addEventListener(\"change\", function () {\n  console.log(\"called it\");\n  board.solver = algorithms[algChooser.selectedIndex];\n});\n\nsetInterval(() => {\n  board.clearBoard(ctx);\n  board.draw(ctx);\n}, config.REFRESH_RATE);\n"]}